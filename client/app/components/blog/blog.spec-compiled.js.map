{"version":3,"sources":["blog.spec.js"],"names":[],"mappings":";;;;oBAAmB,QAAQ;;6BACC,kBAAkB;;wBACzB,aAAa;;;;8BACL,mBAAmB;;AAEhD,QAAQ,CAAC,MAAM,EAAE,YAAM;AACrB,MAAI,UAAU,YAAA,CAAC;AACf,MAAI,cAAc,YAAA,CAAC;;AAEnB,YAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MATnB,IAAI,CASoB,IAAI,CAAC,CAAC,CAAC;AACrC,YAAU,CAAC,MAAM,CAAC,UAAA,YAAY,EAAI;AAChC,cAAU,GAAG,YAAY,CAAC;AAC1B,kBAAc,GAAG,UAAC,WAAW,EAAK;AAChC,aAAO,oBAVL,cAAc,CAUU,WAAW,CAAC,CAAC;KACxC,CAAC;GACH,CAAC,CAAC,CAAA;;AAEH,UAAQ,CAAC,QAAQ,EAAE,YAAM;AACvB,MAAE,CAAC,iCAAiC,EAAE,YAAM;AAC1C,YAAM,CAAC,MAnBL,IAAI,CAmBM,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACpC,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,WAAW,EAAE,YAAK;AACzB,QAAI,GAAG,YAAA,CAAC;AACR,cAAU,CAAC,YAAM;AACf,SAAG,GAAG,mBAzBJ,aAAa,GAyBM,CAAC;KACvB,CAAC,CAAC;;AAEH,MAAE,CAAC,gCAAgC,EAAE,YAAM;AACzC,YAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,uBAAU,CAAC;KACzC,CAAC,CAAC;;AAEH,MAAE,CAAC,kCAAkC,EAAE,YAAM;AAC3C,YAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,KAAK,iBA/B7B,cAAc,CA+B+B,CAAC;KACjD,CAAC,CAAC;;AAEH,MAAE,CAAC,8BAA8B,EAAE,YAAM;AACvC,YAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;KACtC,CAAC,CAAC;;AAEH,MAAE,CAAC,yBAAyB,EAAE,YAAM;AAClC,YAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;KAC5C,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,YAAY,EAAE,YAAK;AAC1B,MAAE,CAAC,wBAAwB,EAAE,YAAK;AAChC,UAAM,UAAU,GAAG,cAAc,EAAE,CAAC;AACpC,YAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;AAC3C,YAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACvD,YAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KACvD,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,UAAU,EAAE,YAAK;AAC1B,MAAE,CAAC,gBAAgB,EAAE,YAAM;AAC1B,YAAM,uBAAU,CAAC,EAAE,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;KACpD,CAAC,CAAC;GACF,CAAC,CAAC;CACJ,CAAC,CAAC","file":"blog.spec-compiled.js","sourcesContent":["import {blog} from './blog';\nimport {blogDirective} from './blog.directive';\nimport template from './blog.html';\nimport {BlogController} from './blog.controller';\n\ndescribe('Blog', () => {\n  let $rootScope;\n  let makeController;\n\n  beforeEach(window.module(blog.name));\n  beforeEach(inject(_$rootScope_ => {\n    $rootScope = _$rootScope_;\n    makeController = (injectables) => {\n      return new BlogController(injectables);\n    };\n  }))\n\n  describe('module', () => {\n    it('should have an appropriate name', () => {\n      expect(blog.name).to.equal('blog');\n    });\n  });\n\n  describe('directive', ()=> {\n    let ddo;\n    beforeEach(() => {\n      ddo = blogDirective();\n    });\n\n    it('should have the right template', () => {\n      expect(ddo.template).to.equal(template);\n    });\n\n    it('should have the right controller', () => {\n      expect(ddo.controller).to.equal(BlogController);\n    });\n\n    it('should have an isolate scope', () => {\n      expect(ddo.scope).to.be.an('object');\n    });\n\n    it('should use controllerAs', () => {\n      expect(ddo.controllerAs).to.be.a('string');\n    });\n  });\n\n  describe('controller', ()=> {\n    it('should have blog posts', ()=> {\n      const controller = makeController();\n      expect(controller.posts).to.be.an('array');\n      expect(controller.posts[0]).to.have.property('author');\n      expect(controller.posts[0]).to.have.property('title');\n    });\n  });\n\n  describe('template', ()=> {\n\t\tit('should have vm', () => {\n\t\t\texpect(template).to.match(/{{\\s?vm\\.message\\s?}}/g);\n\t\t});\n  });\n});\n"]}