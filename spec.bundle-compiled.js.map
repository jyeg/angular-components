{"version":3,"sources":["spec.bundle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;uBAWoB,SAAS;;;;;;;4BAGX,eAAe;;;;;;;;;;;AASjC,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;;;;;AAKlE,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC","file":"spec.bundle-compiled.js","sourcesContent":["/*\n * When testing with webpack and ES6, we have to do some extra\n * things get testing to work right. Because we are gonna write test\n * in ES6 to, we have to compile those as well. That's handled in\n * karma.conf.js with the karma-webpack plugin. This is the entry\n * file for webpack test. Just like webpack will create a bundle.js\n * file for our client, when we run test, it well compile and bundle them\n * all here! Crazy huh. So we need to do some setup\n*/\n\n// import angular duh\nimport angular from 'angular';\n// angular-mocks is a angular plugin built by the angular team\n// for mocking out dependencies, we need this\nimport mocks from 'angular-mocks';\n\n// Ok, this is kinda cray cray. We can use the the context method on\n// require that webpack created in order to tell webpack\n// what files we actually want to require or import.\n// Below, context will be an function/object with file names as keys.\n// using that regex we are saying look in client/app and find\n// any file that ends with spec.js and get its path. By passing in true\n// we say do this recursively\nlet context = require.context('./client/app', true, /\\.spec\\.js/);\n\n// get all the files, for each file, call the context function\n// that will require the file and load it up here. Context will\n// loop and require those spec files here\ncontext.keys().forEach(context);\n"]}